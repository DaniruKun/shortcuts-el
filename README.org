#+TITLE: shortcuts

#+PROPERTY: LOGGING nil

# Note: This readme works with the org-make-toc <https://github.com/alphapapa/org-make-toc> package, which automatically updates the table of contents.

# [[https://melpa.org/#/dilbert][file:https://melpa.org/packages/dilbert-badge.svg]]
[[https://github.com/DaniruKun/shortcuts-el/actions][file:https://github.com/DaniruKun/shortcuts-el/actions/workflows/ci.yml/badge.svg]]

This package allows you to interact with Siri Shortcuts on macOS Monterey and newer.
It provides both interactive user commands, as well as public extension APIs.

This opens up a lot of possibilities for Apple ecosystem automation, including but not limited to:

- Automating HomeKit smart devices
- Using existing iOS utility Shortcuts
- Media playback automation
- Executing other scripts
- Interacting with the macOS window manager

While a lot of these things could be accomlished with Automator and AppleScript, they are quite old and awkward to use, while Shortcuts offer a simple Scratch-like UI with lots of available automations, as well as a gallery to re-use existing Shortcuts.

* Demo

This screenshot shows how to frobnicate the fripulator:

[[screenshot1.png]]

* Contents                                                         :noexport:
:PROPERTIES:
:TOC:      :include siblings
:END:
:CONTENTS:
- [[#installation][Installation]]
- [[#usage][Usage]]
- [[#development][Development]]
- [[#license][License]]
:END:

* Installation
:PROPERTIES:
:TOC:      :depth 0
:END:

** MELPA

If you installed from MELPA, you're done.  Just run one of the commands below.

** Manual

  Then put this file in your load-path, and put this in your init file:

  #+BEGIN_SRC elisp
(require 'shortcuts)
  #+END_SRC

* Usage
:PROPERTIES:
:TOC:      :depth 0
:END:

  Run one of these commands:

  + =shortcuts-run=: Run a Siri Shortcut from a list of available Shortcuts.
  + =shortcuts-gallery-open=: Open the Shortcuts Gallery.
  + =shortcuts-gallery-search=: Search the Shortcuts Gallery.
  + =shortcuts-open-app=: Open the Shortcuts app.
  + =shortcuts-edit=: Edit an existing Shortcut.
  + =shortcuts-create=: Create a new Shortcut.

** Tips

+ You can use the full Shortcuts scheme URL API by using the function ~shortcuts-browse-url~.

  For example:

  #+BEGIN_SRC elisp
  (shortcuts-browse-url "open-shortcut" "MyShortcut")
  #+END_SRC

  Or use the high-level functions directly in your code:

  #+BEGIN_SRC elisp
  (shortcuts-run "SampleShortcut")
  #+END_SRC

* Development

Bug reports, feature requests, suggestions â€” /oh my/!

* License

GPLv3

# Local Variables:
# eval: (require 'org-make-toc)
# before-save-hook: org-make-toc
# org-export-with-properties: ()
# org-export-with-title: t
# End:
